<apex:component >
    <apex:includeScript value="{!$Resource.Phaser}"/>
    <script src="../../soap/ajax/45.0/connection.js" type="text/javascript"/>
	<script>
        var sessionId = sforce.connection.sessionId='{!GETSESSIONID()}';
    	var currentGame = sforce.connection.query("SELECT Id FROM Game__c WHERE Name = 'BlackJack' LIMIT 1")['records']['Id'];
		var currentPlayer = sforce.connection.query("SELECT Id FROM Player__c WHERE OwnerId = '{!$User.Id}' LIMIT 1")['records']['Id'];
    
		function insertResult(betAmount, winAmount){
    		var result = new sforce.SObject('Result__c');
            result.Game__c = currentGame;
    		result.Player__c = currentPlayer;
    		result.Buy_In__c = betAmount;
    		result.Payout__c = winAmount;
    		var returnVal = sforce.connection.create([result]);
			if(returnVal[0].getBoolean('success')) {
				console.log('New Account is created with id' + returnVal[0].id);
			}else{
				console.log('failed to create new Account' + returnVal[0]);
			}
		}
    
    	function returnPlayerBalance(){
        	try{
            	var balance = sforce.connection.query("SELECT Balance__c FROM player__c WHERE OwnerId = '{!$User.Id}' LIMIT 1")['records']['Balance__c'];
            	console.log(balance);
                return balance;
            }catch(err){
            	console.log('exception occured: ' + err.message);
            }
        }
    
    	function setPlayerBalance(newBalance){
        	try{
            	var balance = sforce.connection.query("SELECT Balance__c FROM player__c WHERE OwnerId = '{!$User.Id}' LIMIT 1")['records']['Balance__c'];
                balance['records'] = newBalance;
                var returnVal = sforce.connection.update([balance]);
				if(returnVal[0].getBoolean('success')) {
					console.log('New Account is created with id' + returnVal[0].id);
				}else{
					console.log('failed to create new Account' + returnVal[0]);
				}
            }catch(err){
            	console.log('exception occured: ' + err.message);
            }
        }
    
    
    	//setting up card sudo-class 
function Card(suitValue, faceValue){
    var cardAssetPath = suitValue + faceValue;//some asset path ending with aggregate suit face .png
    var cardFaceValue; 
    if (faceValue == 14){
        cardFaceValue = 11;
    }else if(faceValue > 10 && faceValue < 14){
        cardFaceValue = 10;
    }else{
        cardFaceValue = faceValue; 
    }
    var cardSuitValue = suitValue;
    //returns card numeric value 
    this.getFaceValue = function(){
        if(cardFaceValue > 11 || cardFaceValue < 1){
            console.log('something went wrong card value out of range');
        }else{
            return cardFaceValue;
        }
    }
    this.getPath = function(){
        return cardAssetPath;
    }    
    //going to need a set method
}

// hand class can be used to told cards and get the aggregate sum
function Hand(comp){
    var cardsList = [];
    var cardsSpriteList = [];
    //adds a card to the list of cards currently in the hand
    this.addCard = function(cardToAdd){
        if(cardToAdd instanceof Card){
            cardsList.push(cardToAdd);
        }else{
            console.log('something went wrong attempted to add a non card to hand');
        }
        if(comp && cardsList.length == 2){
        	cardsSpriteList.push(game.add.sprite(360 + cardsList.length * 40, 42, 'cardback'));
        }else if (comp){
            cardsSpriteList.push(game.add.sprite(350 + cardsList.length * 60, 100, cardToAdd.getPath()));
        }else{
            cardsSpriteList.push(game.add.sprite(350 + cardsList.length * 60, window.innerHeight - 350, cardToAdd.getPath()));
        } 
        cardsSpriteList[cardsSpriteList.length - 1].scale.setTo(.25, .25);
    }
    // returns the sum of the cards in the hand 
    this.getSum = function(){
        var sum = 0;
        cardsList.forEach(x => sum += x.getFaceValue());
        return sum;
    }
    
    this.flipCard = function(){
        cardsSpriteList[1].loadTexture(cardsList[1].getPath());
        cardsSpriteList[1].y = 100;
        cardsSpriteList[1].x = 350 + 120;	
    }
    
    this.destroySprites = function(){
        for(let i = 0; i < cardsSpriteList.length; i++){
            cardsSpriteList[i].visible = false;
            cardsSpriteList[i].destroy(true);
        }
    }
}

//player class to hold a hand and to keep track of money 
function Player(playerName, moneyAmount, playerHand){
    var bet = 0;
    var myTurn = true;
    var bank = moneyAmount; //DATABASE RELEVANT INFORMATION
    var name = playerName; //DATABASE  RELEVANT INFORAMTION
    var myHand = playerHand; 
    
    // stand
    this.stay = function(){
        myTurn = false;
    }
        //adds to player bet
    this.betAdd = function(amount){
        if(bank >= amount){
            bank -= amount;
            bet += amount;
            // will need rendering
        }else{
            alert('You don\'t have the funds to bet that much.'); 
        }
    }
    // double
    this.double = function(cardToAdd){
        this.betAdd(bet);
        myHand.addCard(cardToAdd);
        this.stand();
        myTurn = false;
    }
    this.getHand = function(){
        return myHand;
    }
    this.getBet = function(){
        return bet;
    }
    this.getBank = function(){
    	return bank;
    }
    this.setBank = function(){
    	bank = returnPlayerBalance();
    }
    this.getTurn = function(){
        return myTurn;
    }
    this.resetHand = function(){
        myTurn = true;
        myHand = new Hand(false);
    }
    
}

//deck class used to create shuffle and deal cards 
function Deck(){
    var value = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];
    var suit = ['c', 'h', 'd', 's'];
    var cardList = [];
    
    this.makeDeck = function(){
        suit.forEach(function(x){
            value.forEach(function(y){
                var nextCard = new Card(x, y);
                cardList.push(nextCard);   
            });
        });
    }
    
    this.shuffleDeck = function(){
        for(let i = 0; i < cardList.length; i++){
            let rand = Math.floor(Math.random() * 52);
            let temp = cardList[i];
            cardList[i] = cardList[rand]; 
            cardList[rand] = temp;
        }
    }
    
    this.getNext = function(){
        if(cardList.length > 0){
            return cardList.pop();
        } else{
            this.makeDeck();
            this.shuffleDeck();
            this.getNext();
        } 
    }
    
    this.clearDeck = function(){
        cardlist = [];
    }
}


//defining phaser game obj 
var game = new Phaser.Game(1152, 648, Phaser.AUTO, 'phaser-example', { preload: preload, create: create, update: update });

//pre load resources for game 
function preload(){
	game.load.image('blue_chip', '{!URLFOR($Resource.Game_Res,'card_game_res/poker_chip_blue.png')}');
    game.load.image('red_chip', '{!URLFOR($Resource.Game_Res,'card_game_res/poker_chip_red.png')}');
    game.load.image('gold_chip', '{!URLFOR($Resource.Game_Res,'card_game_res/poker_chip_gold.png')}');
    game.load.image('black_chip', '{!URLFOR($Resource.Game_Res,'card_game_res/poker_chip_black.png')}');
    game.load.image('hit', '{!URLFOR($Resource.Game_Res,'card_game_res/hit.png')}');
    game.load.image('stay', '{!URLFOR($Resource.Game_Res,'card_game_res/stay.png')}');
    game.load.image('double', '{!URLFOR($Resource.Game_Res,'card_game_res/double.png')}');
    game.load.image('deal', '{!URLFOR($Resource.Game_Res,'card_game_res/suits.png')}');
    game.load.image('textbox', '{!URLFOR($Resource.Game_Res,'card_game_res/textbox.png')}');
    game.load.image('c2', '{!URLFOR($Resource.Game_Res,'card_game_res/c2.png')}');
    game.load.image('c3', '{!URLFOR($Resource.Game_Res,'card_game_res/c3.png')}');
    game.load.image('c4', '{!URLFOR($Resource.Game_Res,'card_game_res/c4.png')}');
    game.load.image('c5', '{!URLFOR($Resource.Game_Res,'card_game_res/c5.png')}');
    game.load.image('c6', '{!URLFOR($Resource.Game_Res,'card_game_res/c6.png')}');
    game.load.image('c7', '{!URLFOR($Resource.Game_Res,'card_game_res/c7.png')}');
    game.load.image('c8', '{!URLFOR($Resource.Game_Res,'card_game_res/c8.png')}');
    game.load.image('c9', '{!URLFOR($Resource.Game_Res,'card_game_res/c9.png')}');
    game.load.image('c10', '{!URLFOR($Resource.Game_Res,'card_game_res/c10.png')}');
    game.load.image('c11', '{!URLFOR($Resource.Game_Res,'card_game_res/c11.png')}');
    game.load.image('c12', '{!URLFOR($Resource.Game_Res,'card_game_res/c12.png')}');
    game.load.image('c13', '{!URLFOR($Resource.Game_Res,'card_game_res/c13.png')}');
    game.load.image('c14', '{!URLFOR($Resource.Game_Res,'card_game_res/c14.png')}');
    game.load.image('d2', '{!URLFOR($Resource.Game_Res,'card_game_res/d2.png')}');
    game.load.image('d3', '{!URLFOR($Resource.Game_Res,'card_game_res/d3.png')}');
    game.load.image('d4', '{!URLFOR($Resource.Game_Res,'card_game_res/d4.png')}');
    game.load.image('d5', '{!URLFOR($Resource.Game_Res,'card_game_res/d5.png')}');
    game.load.image('d6', '{!URLFOR($Resource.Game_Res,'card_game_res/d6.png')}');
    game.load.image('d7', '{!URLFOR($Resource.Game_Res,'card_game_res/d7.png')}');
    game.load.image('d8', '{!URLFOR($Resource.Game_Res,'card_game_res/d8.png')}');
    game.load.image('d9', '{!URLFOR($Resource.Game_Res,'card_game_res/d9.png')}');
    game.load.image('d10', '{!URLFOR($Resource.Game_Res,'card_game_res/d10.png')}');
    game.load.image('d11', '{!URLFOR($Resource.Game_Res,'card_game_res/d11.png')}');
    game.load.image('d12', '{!URLFOR($Resource.Game_Res,'card_game_res/d12.png')}');
    game.load.image('d13', '{!URLFOR($Resource.Game_Res,'card_game_res/d13.png')}');
    game.load.image('d14', '{!URLFOR($Resource.Game_Res,'card_game_res/d14.png')}');
	game.load.image('h2', '{!URLFOR($Resource.Game_Res,'card_game_res/h2.png')}');
    game.load.image('h3', '{!URLFOR($Resource.Game_Res,'card_game_res/h3.png')}');
    game.load.image('h4', '{!URLFOR($Resource.Game_Res,'card_game_res/h4.png')}');
    game.load.image('h5', '{!URLFOR($Resource.Game_Res,'card_game_res/h5.png')}');
    game.load.image('h6', '{!URLFOR($Resource.Game_Res,'card_game_res/h6.png')}');
    game.load.image('h7', '{!URLFOR($Resource.Game_Res,'card_game_res/h7.png')}');
    game.load.image('h8', '{!URLFOR($Resource.Game_Res,'card_game_res/h8.png')}');
    game.load.image('h9', '{!URLFOR($Resource.Game_Res,'card_game_res/h9.png')}');
    game.load.image('h10', '{!URLFOR($Resource.Game_Res,'card_game_res/h10.png')}');
    game.load.image('h11', '{!URLFOR($Resource.Game_Res,'card_game_res/h11.png')}');
    game.load.image('h12', '{!URLFOR($Resource.Game_Res,'card_game_res/h12.png')}');
    game.load.image('h13', '{!URLFOR($Resource.Game_Res,'card_game_res/h13.png')}');
    game.load.image('h14', '{!URLFOR($Resource.Game_Res,'card_game_res/h14.png')}');
    game.load.image('s2', '{!URLFOR($Resource.Game_Res,'card_game_res/s2.png')}');
    game.load.image('s3', '{!URLFOR($Resource.Game_Res,'card_game_res/s3.png')}');
    game.load.image('s4', '{!URLFOR($Resource.Game_Res,'card_game_res/s4.png')}');
    game.load.image('s5', '{!URLFOR($Resource.Game_Res,'card_game_res/s5.png')}');
    game.load.image('s6', '{!URLFOR($Resource.Game_Res,'card_game_res/s6.png')}');
    game.load.image('s7', '{!URLFOR($Resource.Game_Res,'card_game_res/s7.png')}');
    game.load.image('s8', '{!URLFOR($Resource.Game_Res,'card_game_res/s8.png')}');
    game.load.image('s9', '{!URLFOR($Resource.Game_Res,'card_game_res/s9.png')}');
    game.load.image('s10', '{!URLFOR($Resource.Game_Res,'card_game_res/s10.png')}');
    game.load.image('s11', '{!URLFOR($Resource.Game_Res,'card_game_res/s11.png')}');
    game.load.image('s12', '{!URLFOR($Resource.Game_Res,'card_game_res/s12.png')}');
    game.load.image('s13', '{!URLFOR($Resource.Game_Res,'card_game_res/s13.png')}');
    game.load.image('s14', '{!URLFOR($Resource.Game_Res,'card_game_res/s14.png')}');
    game.load.image('cardback', '{!URLFOR($Resource.Game_Res,'card_game_res/cardback.png')}');
    
}

//create game and create related game resources 
function create() {
    
    // creating objects from js classes for data
    playerHand = new Hand(false);
    computerHand = new Hand(true);
    humanPlayer = new Player('Dos', returnPlayerBalance(), playerHand);
    game.physics.startSystem(Phaser.Physics.ARCADE);
    game.stage.backgroundColor = '#477148';

    var graphics = game.add.graphics(100, 100);
    
    // creating game buttons 
    hitBtn = game.add.button(window.innerWidth / 2 + 100, window.innerHeight - 200, 'hit');
    hitBtn.scale.setTo(.15, .15);
    stayBtn = game.add.button(window.innerWidth / 2 + 175, window.innerHeight - 200, 'stay');
    stayBtn.scale.setTo(.15, .15);
    doubleBtn = game.add.button(window.innerWidth / 2 + 275, window.innerHeight - 200, 'double');
    doubleBtn.scale.setTo(.15, .15);
    tfChipBtn = game.add.button(50, window.innerHeight - 200, 'gold_chip');
    tfChipBtn.scale.setTo(.15, .15);
    ftyChipBtn = game.add.button(150, window.innerHeight - 200, 'red_chip');
    ftyChipBtn.scale.setTo(.15, .15);
    hndChipBtn = game.add.button(250, window.innerHeight - 200, 'blue_chip');
    hndChipBtn.scale.setTo(.15, .15);
    thndChipBtn = game.add.button(350, window.innerHeight - 200, 'black_chip');
    thndChipBtn.scale.setTo(.15, .15);
    dealBtn = game.add.button((window.innerWidth / 2) - 225, (window.innerHeight / 2) -100, 'deal');
    dealBtn.scale.setTo(.15, .15);
    pBetSprite = game.add.sprite(window.innerWidth / 2 + 85, window.innerHeight - 350, 'textbox');
    pBetSprite.scale.setTo(.17, .15);
    pHandValueSprite = game.add.sprite(window.innerWidth / 2 + 65, window.innerHeight - 420, 'textbox');
    pHandValueSprite.scale.setTo(.19, .15);
    pBankValueSprite = game.add.sprite(0, window.innerHeight - 350, 'textbox');
    pBankValueSprite.scale.setTo(.27, .15);
    /*
    testingSprite = game.add.sprite(450, 100, 'pic');
    game.physics.arcade.enable(testingSprite);
	*/
    
    //setup text styling and text elements 
    var style = { font: "32px Arial",  wordWrap: true, wordWrapWidth: 300, align: "center", fill: "white"};
    hitText = game.add.text(Math.floor(hitBtn.x + hitBtn.width / 4), Math.floor(hitBtn.y + hitBtn.height / 2.5), "Hit", style);
    stayText = game.add.text(Math.floor(stayBtn.x + stayBtn.width / 8), Math.floor(stayBtn.y + stayBtn.height / 2.5), "Stay", style);
    doubleText = game.add.text(Math.floor(doubleBtn.x - 10), Math.floor(doubleBtn.y + doubleBtn.height / 2.5), "Double", style);
    tfChipText = game.add.text(Math.floor(tfChipBtn.x), Math.floor(tfChipBtn.y + tfChipBtn.height / 3), "$25", style);
    ftyChipText = game.add.text(Math.floor(ftyChipBtn.x), Math.floor(ftyChipBtn.y + ftyChipBtn.height / 3), "$50", style);
    hndChipText = game.add.text(Math.floor(hndChipBtn.x), Math.floor(hndChipBtn.y + hndChipBtn.height / 3), "$100", style);
    thndChipText = game.add.text(Math.floor(thndChipBtn.x), Math.floor(thndChipBtn.y + thndChipBtn.height / 3), "$200", style);
    dealText = game.add.text(Math.floor(dealBtn.x), Math.floor(dealBtn.y + dealBtn.height / 3.7), "Deal!", style);
    pBetText = game.add.text(Math.floor(pBetSprite.x + pBetSprite.width / 6), Math.floor(pBetSprite.y + pBetSprite.height / 1.9), 'Your Bet: ' + humanPlayer.getBet() , style);
    pHandText = game.add.text(Math.floor(pHandValueSprite.x + pHandValueSprite.width / 6), Math.floor(pHandValueSprite.y + pHandValueSprite.height / 1.9), "", style);
    pBankText = game.add.text(Math.floor(pBankValueSprite.x + pBankValueSprite.width / 6), Math.floor(pBankValueSprite.y + pBankValueSprite.height / 1.9), 'Your Bank: ' + humanPlayer.getBet(), style);

    //initialze input actions for buttons 
    tfChipBtn.onInputUp.add(() => {humanPlayer.betAdd(25);}, this);
    ftyChipBtn.onInputUp.add(() => {humanPlayer.betAdd(50);}, this);
    hndChipBtn.onInputUp.add(() => {humanPlayer.betAdd(100);}, this);
    thndChipBtn.onInputUp.add(() => {humanPlayer.betAdd(200);}, this);
                                   hitBtn.onInputUp.add(()=>{humanPlayer.getHand().addCard(gameDeck.getNext()); /*game.physics.arcade.moveToXY(testingSprite, 200, 500, 0, 1000);*/}, this);
    doubleBtn.onInputUp.add(()=>{humanPlayer.double(gameDeck.getNext()); computerHand.flipCard();}, this);
    stayBtn.onInputUp.add(()=>{humanPlayer.stay(); computerHand.flipCard();}, this);
    dealBtn.onInputUp.add(()=>{bettingPhase = false; dealBtn.visible = false; dealText.visible = false; pHandValueSprite.visible = true; pHandText.visible = true;}, this);
    
    //function wrapping game reset logic for reuse 
    resetGame = function(){
        humanPlayer.setBank();
        pBetText.setText('Your Bet: ' + humanPlayer.getBet());
        pBankText.setText('Your Bank: ' + humanPlayer.getBank());
        pHandText.visible = false;
        pHandValueSprite.visible = false;
        dealBtn.visible = true;
        dealText.visible = true;
        gameDeck = new Deck();
    	gameDeck.makeDeck();
    	gameDeck.shuffleDeck();
        bettingPhase = true;
        humanPlayer.getHand().destroySprites();
        humanPlayer.resetHand();
        computerHand.destroySprites();
        computerHand = new Hand(true);
        pHandText.setText('');
        computerCardCount = 0;
        playerCardCount = 0;
        counter = 0;
        outcomeTracker = 0;
    }
    resetGame();                               
                                   
    window.graphics = graphics;
    
}

//game loop update enable disable buttons and sprites
function update(){
    //preebetting actions
    if(bettingPhase){
        pBetText.setText('Your Bet: ' + humanPlayer.getBet());
        pBankText.setText('Your Bank: ' + humanPlayer.getBank());                           
        hitBtn.isEnabled = false;
        doubleBtn.isEnabled = false;
        stayBtn.isEnabled = false;
    }else if(!bettingPhase && humanPlayer.getTurn()){ // player phase gameplay
        if (counter == 0){
            tfChipBtn.isEnabled = false;
            ftyChipBtn.isEnabled = false;
            hndChipBtn.isEnabled = false;
            thndChipBtn.isEnabled = false;
            hitBtn.isEnabled = true;
            doubleBtn.isEnabled = true;
            stayBtn.isEnabled = true;
            humanPlayer.getHand().addCard(gameDeck.getNext());
            computerHand.addCard(gameDeck.getNext());
            humanPlayer.getHand().addCard(gameDeck.getNext());
            computerHand.addCard(gameDeck.getNext());
            counter = 1;
        }
        
        if (humanPlayer.getHand().getSum() > 21){ // bust logic
            pHandText.setText('Hand Value: ' + humanPlayer.getHand().getSum());
            alert('Bad luck you went over');
            insertResult(humanPlayer.getBet(), humanPlayer.getBet())
            resetGame();
        }
        pHandText.setText('Hand Value: ' + humanPlayer.getHand().getSum());
    }else{
        computerHand.flipCard();
        if (computerHand.getSum() > 21 && outcomeTracker == 0){;
            insertResult(humanPlayer.getBet(), humanPlayer.getBet()),
            game.time.events.add(Phaser.Timer.SECOND, ()=>{alert('Congrats you won '  + humanPlayer.getBet()),                       
            resetGame();}, this)
            outcomeTracker += 1;
        }else if (computerHand.getSum() < 17){
			computerHand.flipCard();    
            computerHand.addCard(gameDeck.getNext());                      
            game.time.events.add(Phaser.Timer.SECOND, ()=>{computerHand.getSum();}, this);
        }else if(computerHand.getSum() >= humanPlayer.getHand().getSum() && computerHand.getSum() < 22 && outcomeTracker == 0){
            insertResult(humanPlayer.getBet(), humanPlayer.getBet())
            computerHand.flipCard();
            game.time.events.add(Phaser.Timer.SECOND, ()=>{alert('Sorry you lose' + humanPlayer.getBet()); resetGame();}, this)
            outcomeTracker += 1;
        }else if (computerHand.getSum() < humanPlayer.getHand().getSum() && computerHand.getSum() < 22 && outcomeTracker == 0){
            computerHand.flipCard();
            game.time.events.add(Phaser.Timer.SECOND, ()=>{if(confirm('Congrats you won '  + humanPlayer.getBet())){
            insertResult(humanPlayer.getBet(), humanPlayer.getBet())                     
            resetGame();}}, this)
                                
            outcomeTracker += 1;
        }
    }
}

    </script>
</apex:component>