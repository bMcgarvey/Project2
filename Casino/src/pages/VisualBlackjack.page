<apex:page >
    <apex:includeScript value="{!$Resource.Phaser}"/>
	<script>
    	//setting up card sudo-class 
function Card(suitValue, faceValue){
    var cardAssetPath = suitValue + faceValue + '.png';//some asset path ending with aggregate suit face .png
    var cardFaceValue; 
    if (faceValue == 14){
        cardFaceValue = 11;
    }else if(faceValue > 10 && faceValue < 14){
        cardFaceValue = 10;
    }else{
        cardFaceValue = faceValue; 
    }
    var cardSuitValue = suitValue;
    //returns card numeric value 
    this.getFaceValue = function(){
        if(cardFaceValue > 11 || cardFaceValue < 1){
            console.log('something went wrong card value out of range');
        }else{
            return cardFaceValue;
        }
    }
    //going to need a set method
}

// hand class can be used to told cards and get the aggregate sum
function Hand(){
    var cardsList = [];
    //adds a card to the list of cards currently in the hand
    this.addCard = function(cardToAdd, y){
        if(cardToAdd instanceof Card){
            cardsList.push(cardToAdd);
        }else{
            console.log('something went wrong attempted to add a non card to hand');
        }
        /*tempSprite = game.add.sprite(450, 100, 'pic');
        if(y > 400){
            drawCardAnimate(325 + playerCardCount * 20, y, tempSprite);
            playerCardCount += 1
        }else{
            drawCardAnimate(475 - computerCardCount * 20, y, tempSprite);
            computerCardCount += 1
        }*/
    }
    // returns the sum of the cards in the hand 
    this.getSum = function(){
        var sum = 0;
        cardsList.forEach(x => sum += x.getFaceValue());
        return sum;
    }
}

//player class to hold a hand and to keep track of money 
function Player(playerName, moneyAmount, playerHand){
    var bet = 0;
    var myTurn = true;
    var bank = moneyAmount; //DATABASE RELEVANT INFORMATION
    var name = playerName; //DATABASE  RELEVANT INFORAMTION
    var myHand = playerHand; 
    
    // stand
    this.stand = function(){
        myTurn = false;
    }
    // double
    this.double = function(cardToAdd){
        this.betAdd(bet);
        myHand.addCard(cardToAdd, 400);
        this.stand();
        myTurn = false;
    }
    //adds to player bet
    this.betAdd = function(amount){
        console.log(amount, bank);
        if(bank >= amount){
            bank -= amount;
            bet += amount;
            // will need rendering
        }else{
            console.log(bank);
            alert('You don\'t have the funds to bet that much.'); 
        }
    }
    this.subtractBet = function(amount){
        if(bet >= amount){
            bet -= amount;
            bank += amount;
            //will need rendering
        }else if(bet > 0 && bet < amount){
            bank += bet;
            bet = 0;
            //will need rendering
        }
        else{
            alert('Your bet is already 0 it cant go lower');
        }
    }
    this.getHand = function(){
        return myHand;
    }
    this.getBet = function(){
        return bet;
    }
    this.getTurn = function(){
        return myTurn;
    }
    
    this.resetHand = function(){
        myhand = new Hand();
    }
}

//deck class used to create shuffle and deal cards 
function Deck(){
    var value = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];
    var suit = ['c', 'h', 'd', 's'];
    var cardList = [];
    
    this.makeDeck = function(){
        suit.forEach(function(x){
            value.forEach(function(y){
                var nextCard = new Card(x, y);
                cardList.push(nextCard);   
            });
        });
    }
    
    this.shuffleDeck = function(){
        for(let i = 0; i < cardList.length; i++){
            let rand = Math.floor(Math.random() * 52);
            let temp = cardList[i];
            cardList[i] = cardList[rand]; 
            cardList[rand] = temp;
        }
    }
    
    this.getNext = function(){
        if(cardList.length > 0){
            console.log(cardList, cardList[0],  cardList.pop());
            return cardList.pop();
        } else{
            this.makeDeck();
            this.shuffleDeck();
            this.getNext();
        } 
    }
    
    this.clearDeck = function(){
        cardlist = [];
    }
}

//defining phaser game obj 
var game = new Phaser.Game(1152, 648, Phaser.AUTO, 'phaser-example', { preload: preload, create: create, update: update });

//pre load resources for game 
function preload(){
	game.load.image('blue_chip', '{!URLFOR($Resource.Game_Res,'card_game_res/poker_chip_blue.png')}');
    game.load.image('red_chip', '{!URLFOR($Resource.Game_Res,'card_game_res/poker_chip_red.png')}');
    game.load.image('gold_chip', '{!URLFOR($Resource.Game_Res,'card_game_res/poker_chip_gold.png')}');
    game.load.image('black_chip', '{!URLFOR($Resource.Game_Res,'card_game_res/poker_chip_black.png')}');
    game.load.image('hit', '{!URLFOR($Resource.Game_Res,'card_game_res/hit.png')}');
    game.load.image('stay', '{!URLFOR($Resource.Game_Res,'card_game_res/stay.png')}');
    game.load.image('double', '{!URLFOR($Resource.Game_Res,'card_game_res/double.png')}');
    game.load.image('deal', '{!URLFOR($Resource.Game_Res,'card_game_res/suits.png')}');
    game.load.image('textbox', '{!URLFOR($Resource.Game_Res,'card_game_res/textbox.png')}');

    
}

//create game and create related game resources 
function create() {
    
    // creating objects from js classes for data
    gameDeck = new Deck();
    gameDeck.makeDeck();
    gameDeck.shuffleDeck();
    playerHand = new Hand();
    computerHand = new Hand();
    humanPlayer = new Player('Dos', 500, playerHand);
    game.physics.startSystem(Phaser.Physics.ARCADE);

    bettingPhase = true;
    game.stage.backgroundColor = '#477148';
    counter = 0;
    playerCardCount = 0;
    computerCardCount = 0;

    //function wrapping game reset logic for reuse 
    resetGame = function(){
        humanPlayer.subtractBet(humanPlayer.getBet());
        pBetText.setText('Your Bet: ' + humanPlayer.getBet());
        pHandText.visible = false;
        pHandValueSprite.visible = false;
        dealBtn.visible = true;
        dealText.visible = true;
        gameDeck.makeDeck();
        gameDeck.shuffleDeck();
        bettingPhase = true;
        humanPlayer.resetHand();
        computerHand = new Hand();
        pHandText.setText('');
        computerCardCount = 0;
        playerCardCount = 0;
    }

    var graphics = game.add.graphics(100, 100);
    
    // creating game buttons 
    hitBtn = game.add.button(window.innerWidth / 2 + 100, window.innerHeight - 200, 'hit');
    hitBtn.scale.setTo(.15, .15);
    stayBtn = game.add.button(window.innerWidth / 2 + 175, window.innerHeight - 200, 'stay');
    stayBtn.scale.setTo(.15, .15);
    doubleBtn = game.add.button(window.innerWidth / 2 + 275, window.innerHeight - 200, 'double');
    doubleBtn.scale.setTo(.15, .15);
    tfChipBtn = game.add.button(50, window.innerHeight - 200, 'gold_chip');
    tfChipBtn.scale.setTo(.15, .15);
    ftyChipBtn = game.add.button(150, window.innerHeight - 200, 'red_chip');
    ftyChipBtn.scale.setTo(.15, .15);
    hndChipBtn = game.add.button(250, window.innerHeight - 200, 'blue_chip');
    hndChipBtn.scale.setTo(.15, .15);
    thndChipBtn = game.add.button(350, window.innerHeight - 200, 'black_chip');
    thndChipBtn.scale.setTo(.15, .15);
    dealBtn = game.add.button((window.innerWidth / 2) - 225, (window.innerHeight / 2) -100, 'deal');
    dealBtn.scale.setTo(.15, .15);
    pBetSprite = game.add.sprite(window.innerWidth / 2 + 85, window.innerHeight - 350, 'textbox');
    pBetSprite.scale.setTo(.17, .15);
    pHandValueSprite = game.add.sprite(window.innerWidth / 2 + 65, window.innerHeight - 420, 'textbox');
    pHandValueSprite.scale.setTo(.19, .15);
    /*
    testingSprite = game.add.sprite(450, 100, 'pic');
    game.physics.arcade.enable(testingSprite);
	*/
    
    //setup text styling and text elements 
    var style = { font: "32px Arial",  wordWrap: true, wordWrapWidth: 230, align: "center", fill: "white"};
    hitText = game.add.text(Math.floor(hitBtn.x + hitBtn.width / 4), Math.floor(hitBtn.y + hitBtn.height / 2.5), "Hit", style);
    stayText = game.add.text(Math.floor(stayBtn.x + stayBtn.width / 8), Math.floor(stayBtn.y + stayBtn.height / 2.5), "Stay", style);
    doubleText = game.add.text(Math.floor(doubleBtn.x - 10), Math.floor(doubleBtn.y + doubleBtn.height / 2.5), "Double", style);
    tfChipText = game.add.text(Math.floor(tfChipBtn.x), Math.floor(tfChipBtn.y + tfChipBtn.height / 3), "$25", style);
    ftyChipText = game.add.text(Math.floor(ftyChipBtn.x), Math.floor(ftyChipBtn.y + ftyChipBtn.height / 3), "$50", style);
    hndChipText = game.add.text(Math.floor(hndChipBtn.x), Math.floor(hndChipBtn.y + hndChipBtn.height / 3), "$100", style);
    thndChipText = game.add.text(Math.floor(thndChipBtn.x), Math.floor(thndChipBtn.y + thndChipBtn.height / 3), "$200", style);
    dealText = game.add.text(Math.floor(dealBtn.x), Math.floor(dealBtn.y + dealBtn.height / 3.7), "Deal!", style);
    pBetText = game.add.text(Math.floor(pBetSprite.x + pBetSprite.width / 6), Math.floor(pBetSprite.y + pBetSprite.height / 1.9), 'Your Bet: ' + humanPlayer.getBet() , style);
    pHandText = game.add.text(Math.floor(pHandValueSprite.x + pHandValueSprite.width / 6), Math.floor(pHandValueSprite.y + pHandValueSprite.height / 1.9), "", style);

    //text and sprites that need to be invisble setup
    pHandText.visible = false;
    pHandValueSprite.visible = false;

    //initialze input actions for buttons 
    tfChipBtn.onInputUp.add(() => {humanPlayer.betAdd(25);}, this);
    ftyChipBtn.onInputUp.add(() => {humanPlayer.betAdd(50);}, this);
    hndChipBtn.onInputUp.add(() => {humanPlayer.betAdd(100);}, this);
    thndChipBtn.onInputUp.add(() => {humanPlayer.betAdd(200);}, this);
                                   hitBtn.onInputUp.add(()=>{humanPlayer.getHand().addCard(gameDeck.getNext(), 400); /*game.physics.arcade.moveToXY(testingSprite, 200, 500, 0, 1000);*/}, this);
    doubleBtn.onInputUp.add(()=>{humanPlayer.double(gameDeck.getNext());}, this);
    stayBtn.onInputUp.add(()=>{humanPlayer.stay()}, this);
    dealBtn.onInputUp.add(()=>{bettingPhase = false; dealBtn.visible = false; dealText.visible = false; pHandValueSprite.visible = true; pHandText.visible = true;}, this);
    
    window.graphics = graphics;
    
}

//game loop update enable disable buttons and sprites
function update(){
    //preebetting actions
    if(bettingPhase){
        pBetText.setText('Your Bet: ' + humanPlayer.getBet())
        hitBtn.isEnabled = false;
        doubleBtn.isEnabled = false;
        stayBtn.isEnabled = false;
    }else if(!bettingPhase && humanPlayer.getTurn()){ // player phase gameplay
        if (counter == 0){
            tfChipBtn.isEnabled = false;
            ftyChipBtn.isEnabled = false;
            hndChipBtn.isEnabled = false;
            thndChipBtn.isEnabled = false;
            hitBtn.isEnabled = true;
            doubleBtn.isEnabled = true;
            stayBtn.isEnabled = true;
            humanPlayer.getHand().addCard(gameDeck.getNext(), 400);
            computerHand.addCard(gameDeck.getNext(), 200);
            humanPlayer.getHand().addCard(gameDeck.getNext(), 400);
            computerHand.addCard(gameDeck.getNext(), 200);
            counter = 1;
        }
        if (humanPlayer.getHand().getSum() > 21){ // bust logic
            pHandText.setText('Hand Value: ' + humanPlayer.getHand().getSum());
            alert('Bad luck you went over');
            resetGame();
        }
        pHandText.setText('Hand Value: ' + humanPlayer.getHand().getSum());
    }
}

    </script>
</apex:page>